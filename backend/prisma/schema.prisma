generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://myuser:mypassword@localhost:5432/mydatabase"
}

// User model representing an application user
model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  email            String           @unique
  password         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  workouts         Workout[]
  exercises        Exercise[]
  workoutHistories WorkoutHistory[]
  workoutPrograms  WorkoutProgram[]
}

// Role model representing a user role
model Role {
  id   Int      @id @default(autoincrement()) // Unique identifier for the role
  name RoleName // Name of the role
}

enum RoleName {
  USER
  ADMIN
}

// Workout model representing a workout session
model Workout {
  id               Int               @id @default(autoincrement())
  name             String
  userId           Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  workoutExercises WorkoutExercise[]
  workoutHistories WorkoutHistory[]
  programDays      ProgramDay[]

  @@unique([name, userId])
}

// Exercise model representing an individual exercise
model Exercise {
  id               Int               @id @default(autoincrement())
  name             String
  userId           Int
  incrementValue   Float             @default(2.5) // Increment value for the exercise (weight increase)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  workoutExercises WorkoutExercise[]
  sets             Set[]

  @@unique([name, userId])
}

// Model linking workouts and exercises, along with additional details like sets and reps
model WorkoutExercise {
  workoutId     Int
  exerciseId    Int
  sets          Int
  reps          Int
  skipIncrement Boolean  @default(false) // Flag to skip increment for this exercise
  workout       Workout  @relation(fields: [workoutId], references: [id])
  exercise      Exercise @relation(fields: [exerciseId], references: [id])
  repsPerSet    Rep[]

  @@id([workoutId, exerciseId])
}

// Model for tracking workout history
model WorkoutHistory {
  id          Int      @id @default(autoincrement())
  workoutId   Int
  userId      Int
  performedAt DateTime @default(now())
  comments    String?
  workout     Workout  @relation(fields: [workoutId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  sets        Set[]

  @@unique([workoutId, performedAt, userId])
}

// Model representing a set within a workout
model Set {
  id               Int            @id @default(autoincrement())
  workoutHistoryId Int
  exerciseId       Int
  targetReps       Int
  actualReps       Int
  weight           Float
  date             DateTime
  workoutHistory   WorkoutHistory @relation(fields: [workoutHistoryId], references: [id])
  exercise         Exercise       @relation(fields: [exerciseId], references: [id])
}

// Model for tracking reps details within a workout exercise
model Rep {
  id                        Int             @id @default(autoincrement())
  workoutExerciseWorkoutId  Int
  workoutExerciseExerciseId Int
  setNumber                 Int
  targetReps                Int
  actualReps                Int // Actual number of reps performed
  workoutExercise           WorkoutExercise @relation(fields: [workoutExerciseWorkoutId, workoutExerciseExerciseId], references: [workoutId, exerciseId]) // Relation to the WorkoutExercise

  @@unique([setNumber, workoutExerciseWorkoutId, workoutExerciseExerciseId])
}

// Model representing a workout program
model WorkoutProgram {
  id          Int          @id @default(autoincrement())
  name        String
  userId      Int
  duration    Int // Duration of the program in days or weeks
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  programDays ProgramDay[]
}

// Model representing a specific day in a workout program
model ProgramDay {
  id               Int            @id @default(autoincrement())
  dayOfWeek        String // Day of the week (e.g., "Monday")
  workoutId        Int? // Optional Workout ID for the day
  workout          Workout?       @relation(fields: [workoutId], references: [id])
  workoutProgramId Int
  workoutProgram   WorkoutProgram @relation(fields: [workoutProgramId], references: [id])

  @@unique([dayOfWeek, workoutProgramId])
}
